Se você quiser fazer deploy da sua API Python para um servidor Azure usando GitHub Actions, o processo é bem integrado e seguro. O Azure oferece suporte nativo ao GitHub Actions, especialmente via Azure App Service, que é ideal para hospedar APIs e aplicações web.

🚀 Como funciona o deploy para Azure com GitHub Actions
🧰 1. Pré-requisitos
- Conta no Azure
- Um recurso de App Service criado (Linux ou Windows)
- Repositório no GitHub com sua API
- Permissões para criar identidades gerenciadas (ou usar autenticação básica)

⚙️ 2. Configurar o App Service com GitHub Actions
Você pode fazer isso direto pelo portal do Azure:
- Acesse seu App Service
- Vá em Centro de Implantação
- Escolha GitHub como origem
- Selecione seu repositório e branch (main)
- O Azure vai gerar automaticamente um arquivo .yml no seu repositório com o workflow de deploy
Esse método usa OpenID Connect (OIDC) para autenticação segura — sem precisar armazenar secrets no GitHub.


name: Deploy para Azure App Service

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Deploy para Azure
        uses: azure/webapps-deploy@v2
        with:
          app-name: nome-do-seu-app
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}


          O publish-profile pode ser gerado no portal do Azure e adicionado como secret no GitHub, caso você não use OIDC.

Se você quiser fazer deploy da sua API Python para um servidor Azure usando GitHub Actions, o processo é bem integrado e seguro. O Azure oferece suporte nativo ao GitHub Actions, especialmente via Azure App Service, que é ideal para hospedar APIs e aplicações web.

🚀 Como funciona o deploy para Azure com GitHub Actions
🧰 1. Pré-requisitos
- Conta no Azure
- Um recurso de App Service criado (Linux ou Windows)
- Repositório no GitHub com sua API
- Permissões para criar identidades gerenciadas (ou usar autenticação básica)

⚙️ 2. Configurar o App Service com GitHub Actions
Você pode fazer isso direto pelo portal do Azure:
- Acesse seu App Service
- Vá em Centro de Implantação
- Escolha GitHub como origem
- Selecione seu repositório e branch (main)
- O Azure vai gerar automaticamente um arquivo .yml no seu repositório com o workflow de deploy
Esse método usa OpenID Connect (OIDC) para autenticação segura — sem precisar armazenar secrets no GitHub.

📄 3. Exemplo de workflow gerado
name: Deploy para Azure App Service

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout do código
        uses: actions/checkout@v3

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Deploy para Azure
        uses: azure/webapps-deploy@v2
        with:
          app-name: nome-do-seu-app
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}


O publish-profile pode ser gerado no portal do Azure e adicionado como secret no GitHub, caso você não use OIDC.


🔐 Segurança no Azure + GitHub Actions
- ✅ Use OpenID Connect para autenticação sem secrets
- ✅ Restrinja o deploy à branch main
- ✅ Use actions/setup-python com versão fixa
- ✅ Evite imprimir variáveis sensíveis nos logs
- ✅ Adicione escaneamento de segurança com bandit ou safety


